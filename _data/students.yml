- name: "This could be you!"
  photo: rock.jpg
  info: See <a href="/vacancies">openings</a> for more info
  email: vvasilev@cern.ch
  current: 1

- name: Vaibhav Garg
  info: "Enable Modules on Windows, GSoC 2020"
  email: gargvaibhav64@gmail.com
  education: "Computer Science, Birla Institute of Technology and Science, Pilani, India"
  description: |
    ROOT has several features that interact with libraries and require implicit
    header inclusion. This can be triggered by reading or writing data on disk,
    or user actions at the prompt. Exposing the full shared library descriptors
    to the interpreter at runtime translates into an increased memory footprint.
    ROOT’s exploratory programming concepts allow implicit and explicit runtime
    shared library loading. It requires the interpreter to load the library
    descriptor. Re-parsing of descriptors’ content has a noticeable effect on
    runtime performance. C++ Modules are designed to minimize the reparsing of
    the same header content by providing an efficient on-disk representation of
    the C++ Code. C++ Modules have been implemented for Unix and OS X systems
    already and it is expected that with next release of ROOT, C++ modules will
    be default on OS X. This project aims to extend the C++ Modules support for
    Windows, by implementing compatible solutions to the UNIX baseline and also
    display corresponding performance results.
  report: <a href="https://summerofcode.withgoogle.com/archive/2020/projects/6406031539699712/" target="_blank">GSoC 2020 Archive</a>
  mentors: Vassil Vassilev, Bertrand Bellenot

- name: Lucas Camolezi
  info: "Reduce boost dependence in CMSSW, GSoC 2020"
  email: camolezi@usp.br
  education: "Computer Engineering, University of São Paulo, Brazil"
  description: |
    This project has the goal to find and decrease boost dependencies in CMSSW.
    Modern C++ introduced a lot of new features that were only available through
    boost packages. Thus, some boost code can be replaced with similar C++
    standard library features. Using standard features is a good practice, this
    project will move the CMSSW codebase in that direction.
  report: <a href="https://summerofcode.withgoogle.com/archive/2020/projects/5397144158076928/" target="_blank">GSoC 2020 Archive</a>
  mentors: Vassil Vassilev, David Lange

- name: Roman Shakhov
  info: "Extend clad to compute Jacobians, GSoC 2020"
  email: r.intval@gmail.com
  education: "Mathematics and Computer Science, Voronezh State University, Russia"
  description: |
    In mathematics and computer algebra, automatic differentiation (AD) is a
    set of techniques to numerically evaluate the derivative of a function
    specified by a computer program. Automatic differentiation is an alternative
    technique to Symbolic differentiation and Numerical differentiation (the
    method of finite differences). CLAD is based on Clang which will provide the
    necessary facilities for code transformation. The AD library is able to
    differentiate non-trivial functions, to find a partial derivative for trivial
    cases and has good unit test coverage.
    Currently, clad does not provide an easy way to compute Jacobians.
  report: <a href="/assets/presentations/LLVM2020_Clad.pdf" target="_blank">Poster</a>
  mentors: Vassil Vassilev, Alexander Penev
